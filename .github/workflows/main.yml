# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: ReactJS CI&CD

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Github Action
        uses: actions/checkout@v3

      # workflow가 실행될 때 필요한 파일 중에서 거의 바뀌지 않는 파일들을 GitHub의 캐시에 올려놓고 CI 서버로 내려받습니다.
      # 프로젝트에서 자주 바뀌지 않는 수많은 패키지를 매번 다운받아 올리면 시간도 오래걸리고 네트워크 대역폭을 많이 사용하게됩니다.
      - name: Get NPM Cache Directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install

      - name: Build React
        run: npm run build

      - name: Compress Build File
        run: zip -r react-build-new build

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: react-build-file
          # A file, directory or wildcard pattern that describes what to upload
          path: ./react-build-new.zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: react-build-file
      - name: Transfer Deploy Script use SCP
        uses: appleboy/scp-action@master
        with:
          username: ${{ secrets.SHH_USER }}
          host: ${{ secrets.SERVER_IP }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: "react-build-new.zip"
          target: "~/deployment-study/nginx/html"
      - name: Execute Deploy.sh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SHH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            docker exec -i nginx_nginx_deployment_study_1 bash -c "cd /var/www/build && sh ./deploy.sh"
